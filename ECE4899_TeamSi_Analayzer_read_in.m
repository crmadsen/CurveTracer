%%  Transistor Identification and Characterization System
%
% Parametric Analyzer Ingest and Comparison Script
%
%  27 April 2016
%
%  Created by Sam Schmidt and Luis García
%  
%  This script was created to ingest the data output from the Parametric
%  Analyzer found in the RF Lab at UCCS and compare it to data generated by
%  LTSpice or the Transistor Identification and Characterization System
%  (TICS) created by Team Si as part of the Spring 2016 Senior Design class
%  requirements.
%
%---- Set Up MATLAB
clc, close all;
format long;

%% Reading the File

% Open File for reading

% Due to the way the University sets up network accounts for all staff and
% students it is impossible to anticipate the location of the comma
% separated file being imported. As such the user will be prompted to
% enter the path of the file as the first step in the execution of this 
% script. The path must correspond to the location where MATLAB is 
% configured, in order to search for data files. It should be in a format 
% similar to the following:
%
%   drive:\Users\username\Documents\MATLAB\curve.csv  (Windows)
%         /Users/username/Documents/MATLAB/MOSFET_NMOS_1.csv (Mac OS X)
%   e.g. C:\Users\jjones\Documents\MATLAB\curve.csv 
% 
% Ensure to include the .csv in te pat name.
% The easiest thing may be to open a file explorer window, find the file, &
% copy the path from the file explorer window.

%****************REMEMBER TO UNCOMMENT WHEN FINAL************************
% file_path = input('Enter Data File Path: ','s')
% fid = fopen(file_path,'r');
%************************************************************************

% Read Transistor Identification from File
formatSpec = '%s';
% N = 1212;
Id_text = textscan(fid,formatSpec,'Delimiter',',');

fclose(fid);

% Define Identification variables

% These next lines extract the header information in the Comma Separated
% File generated by the system 
% Id_text is the string containing all header information 

volt_raw = Id_text{1}(1:2:end);
%volts = {volt_raw{1}(1:5)};
cur_raw = Id_text{1}(2:2:end);

%  The code below converts the string into values and formats them
%  accordingly so that they may be compared.

for i = 1:length(volt_raw)
   if any('m' == volt_raw{i}((end-2):end))
        volt_raw{i} = str2num(volt_raw{i}(1:end-2))/1000;
   else
        volt_raw{i} = str2num(volt_raw{i}(1:end-2));
   end
   
    if any('m' == cur_raw{i}((end-2):end))
        cur_raw{i} = str2num(cur_raw{i}(1:end-2))/1000;
    elseif any('u' == cur_raw{i}((end-2):end))
        cur_raw{i} = str2num(cur_raw{i}(1:end-2))/1e6;
    elseif any('n' == cur_raw{i}((end-2):end))
        cur_raw{i} = str2num(cur_raw{i}(1:end-2))/1e9;
    else
        cur_raw{i} = str2num(cur_raw{i}(1:end-2))/1e12;
    end
            
    
end

volts = cell2mat(volt_raw');
amps = cell2mat(cur_raw');
max_cur = max(amps);
% max_cur = max_cur(1,6);

N=3;
volts=volts(1:N:length(volts))

volts=reshape(volts,101,6);
amps=reshape(amps,101,6);

% If the analyzer data wants to be compared to data from either TICS or
% LTSpice, that data can be imported using MATLAB's import function or a
% new textscan statement can be created.  We chose to import the data every
% time.  The statement inside the max statement below is the name of the
% current variable created when the current data from one of these sources
% was imported into MATLAB.  Simply change the name of this variable to
% whatever MATLAB assigns to the data when read in.

max_pi = max(VarName2);

scaler = max_pi/max_cur;
scaled_cur = scaler.*amps;

plot(volts,amps)
hold on;

% The plot command below uses the name of the variables assigned by MATLAB
% to the LTSpcice/TICS imported voltage and current values. Replace these
% variable names with the new MATLAB variables as appropriate.

plot(Terminal2GATE,Terminal3DRAIN*10,'--')

